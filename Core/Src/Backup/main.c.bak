/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "app_lorawan.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdbool.h"
#include "sys_app.h"
#include "stm32_timer.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static bool messageTransmitted = false;
static bool error = false;

static bool startMeasurement = false;

static UTIL_TIMER_Object_t MeasurementTimer;
static UTIL_TIMER_Object_t wakeSensorUpTimer;

static uint8_t rxBuffer[256] = {0xFF};
static uint8_t rxPointer = 0;

static uint8_t reception[1] = {0xFF};

// Buffer for whole measurement frames
static char waterLevel[115];
static char waterTemp[115];
static char waterEC[115];
static char waterSalinity[115];
static char waterTDS[115];
static char batteryLevel[115];

static bool IRDA_Receive(IRDA_HandleTypeDef *hirda) {
	// Wait for 10 ms to see if anything else has been sent
	switch (HAL_IRDA_Receive(hirda, reception, sizeof(reception), 10)) {
		// Reception is complete
		case HAL_TIMEOUT: {
			return true;
		}
		case HAL_OK: {
			rxBuffer[rxPointer++] = reception[0];
			break;
		}
		default: {}
	}

	return false;
}

/*
void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda) {
	// Reset the counting value of the timer
	__HAL_TIM_SET_COUNTER(&htim16, (uint16_t) 0);

	// Restart the timer (if it hasn't already been started)
	HAL_TIM_Base_Start_IT(&htim16);
}

void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda) {
	messageTransmitted = true;
}

void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda) {
	error = true;
}

// Notifies when a reception is complete
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	messageReceived = true;
}
*/
static void StartMeasurement(void) {
	startMeasurement = true;
}

static void WakeSensorUp(void) {
	uint8_t messageSend[] = "A\r";

	HAL_IRDA_Transmit(&hirda2, messageSend, sizeof(messageSend) - 1, 100);
}

/*
 * This function calculates the checksum of a given message.
 * Message includes "\r" at end of the transmission.
 */
static bool IRDA_checksum(const char *message) {
	uint8_t messageLength = strlen(message);

	if (message[messageLength - 1] != '\r') {
		return false;
	}

	// Get checksum from message (convert from ASCII to binary)
	// Checksum is sent in ASCII format (e.g "5288" -> 5288 in decimal)
	uint16_t checksumRead = (((uint16_t) message[messageLength - 7]) - 0x0030) * 1000;
	checksumRead += (((uint16_t) message[messageLength - 6]) - 0x0030) * 100;
	checksumRead += (((uint16_t) message[messageLength - 5]) - 0x0030) * 10;
	checksumRead += ((uint16_t) message[messageLength - 4]) - 0x0030;

	uint16_t checksumCalculated = 0;

	// Skip over checksum characters
	for (uint8_t i = 0; i < messageLength - 10; i++) {
		checksumCalculated += message[i];
	}

	// Replace checksum within message with spaces
	checksumCalculated += 8 * 0x0020 + message[messageLength - 2];

	APP_LOG(TS_ON, VLEVEL_M, "Checksum Read: %d | Calculated: %d\r\n", checksumRead, checksumCalculated);

	return checksumRead == checksumCalculated;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  //uint8_t sizes[] = {4};
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_LoRaWAN_Init();
  MX_USART2_IRDA_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Create a timer that handles measurement taking
  UTIL_TIMER_Create(&MeasurementTimer, 30000, UTIL_TIMER_PERIODIC, StartMeasurement, NULL);
  UTIL_TIMER_Create(&wakeSensorUpTimer, 200, UTIL_TIMER_PERIODIC, WakeSensorUp, NULL);

  startMeasurement = true;

  // Just to be safe, flush the RX and TX buffers
  __HAL_IRDA_FLUSH_DRREGISTER(&hirda2);

  //HAL_IRDA_Receive_IT(&hirda2, rxBuffer, sizeof(rxBuffer));

  while (1)
  {
	//HAL_TIM_IRQHandler(&htim16);

	if (startMeasurement) {
		LmHandlerHalt();

		//UTIL_TIMER_Start(&wakeSensorUpTimer);

		while (true) {
			if (IRDA_Receive(&hirda2)) {
				//HAL_TIM_Base_Stop_IT(&htim16);

				/*
				char measurement[] = "Test";

				if (strstr(measurement, "K23") != NULL) {
					IRDA_checksum(measurement);
				}
				*/

				//__HAL_IRDA_FLUSH_DRREGISTER(&hirda2);

				//rxPointer = sizeof(rxBuffer) - hirda2.RxXferCount - 1;

				if (rxPointer != 0) {
					//__HAL_IRDA_FLUSH_DRREGISTER(&hirda2);

					char receiveString[rxPointer + 1];

					strncpy(receiveString, rxBuffer, rxPointer);
					// String must end with a NULL char
					receiveString[rxPointer] = '\0';

					APP_LOG(TS_ON, VLEVEL_M, receiveString/*"MESSAGE RECEIVED\r\n"*/);
					APP_LOG(TS_OFF, VLEVEL_M, "\r\n");

					//HAL_IRDA_Transmit_IT(&hirda2, rxBuffer, rxPointer);

					rxPointer = 0;
				}

				/*
				// Get received content in string form, so that it can be compared
				char receiveString[rxPointer];

				strncpy(receiveString, rxBuffer, rxPointer);

				// If message contains checksum
				if (strstr(receiveString, "K23") != NULL && !IRDA_checksum(receiveString, rxPointer)) {
					//ADD CODE FOR CHECKSUM IF FAILURE
				}

				// Once woken up, sensor will ask "what function" with "08?\r"
				if (!strcmp(receiveString, "?08\r")) {
					// Stop timer
					UTIL_TIMER_Stop(&wakeUpSendTimer);

					// Send request
					uint8_t messageSend[] = "S\r";

					HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);

					message = MESSAGE_START;

					rxPointer = 0;
				} else if (!strcmp(receiveString, "*\r")) {
					// Acknowledge that there is a send request ("S")
					if (message == MESSAGE_START) {
						// Send first register value request
						uint8_t messageSend[] = "F0017G0010\r";

						HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
					}

					// Acknowledge the end of transmission ("A", Abbruch)
					if (message == MESSAGE_END) {
						// Done, can go back to sleep
						uint8_t status = SendTxData(waterLevel, waterTemp, waterEC, waterSalinity, waterTDS, batteryLevel);

						//HAL_RTC_
						//HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
					}
				} else if (!strncmp(receiveString, "K85 00170010", 12)) {
					// Register value requests
					uint8_t messageSend[] = "F0017G0020\r";

					HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);

					strncpy(waterLevel, receiveString, strlen(receiveString) - 1);
				} else if (!strncmp(receiveString, "K85 00170020", 12)) {
					uint8_t messageSend[] = "F0017G0030\r";

					HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);

					strncpy(waterTemp, receiveString, strlen(receiveString) - 1);
				} else if (!strncmp(receiveString, "K85 00170030", 12)) {
					uint8_t messageSend[] = "F0017G0035\r";

					HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);

					strncpy(waterEC, receiveString, strlen(receiveString) - 1);
				} else if (!strncmp(receiveString, "K85 00170035", 12)) {
					uint8_t messageSend[] = "F0017G0036\r";

					HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);

					strncpy(waterSalinity, receiveString, strlen(receiveString) - 1);
				} else if (!strncmp(receiveString, "K85 00170036", 12)) {
					message = MESSAGE_END;

					uint8_t messageSend[] = "F0017G0090\r";

					HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);

					strncpy(waterTDS, receiveString, strlen(receiveString) - 1);
				} else if (!strncmp(receiveString, "K85 00170090", 12)) {
					// Last register value request
					uint8_t messageSend[] = "A\r";

					HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);

					strncpy(batteryLevel, receiveString, strlen(receiveString) - 1);
				} else {
					//////////////Not awaited reception handling goes here

					if (rxPointer != 0) {

					}
				}*/
			}

			if (messageTransmitted) {
				messageTransmitted = false;
				APP_LOG(TS_ON, VLEVEL_M, "MESSAGE TRANSMITTED\r\n");
			}

			if (error) {
				error = false;
				APP_LOG(TS_ON, VLEVEL_M, "IRDA CALLBACK ERROR: %d\r\n", hirda2.ErrorCode);
			}
		}
	}

    /* USER CODE END WHILE */
	//MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
